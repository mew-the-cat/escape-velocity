{"version":3,"sources":["constants/SETTINGS.ts","models/Phase.ts","models/Item.ts","constants/ITEM_REGISTRY.ts","models/Inventory.ts","models/Player.ts","models/Cell.ts","components/CellTile.tsx","components/Map.tsx","components/StatusBar.tsx","components/ActionBar.tsx","components/ItemTile.tsx","components/InventoryBar.tsx","components/CellBar.tsx","components/CraftBar.tsx","models/Tiletype.ts","constants/TILETYPE_REGISTRY.ts","components/Game.tsx","components/App.tsx","reportWebVitals.js","index.js"],"names":["SETTINGS","x","y","Phase","turn","isNight","untilNextTurn","this","Item","id","name","frequency","ITEM_REGISTRY","generateItemSubset","itemSubset","i","length","push","Inventory","inventorySize","size","slots","Array","Player","hp","ap","coords","inventory","Cell","type","characters","items","CellTile","styled","button","props","tiletype","color","Map","Cells","row","tiles","col","handleClickTileBound","onClick","bind","React","Component","StatusBar","phase","ActionBar","className","value","ItemTile","input","InventoryBar","itemListComponents","handleClickItemInventoryBound","CellBar","handleClickItemTileBound","CraftBar","Tiletype","TILETYPE_REGISTRY","Game","initialTiles","initialCharacters","initialPhase","state","handleClickTile","handleClickSearch","handleClickItemInventory","handleClickItemTile","setInterval","gameLoop","updatedPhase","setState","updatedCharacters","rowSpan","colSpan","distCellToCharacter","oldX","oldY","updatedTiles","alert","fillPosition","randomIndex","Math","floor","random","randomNumber","randomItem","console","log","generateItem","slot","splice","max","abs","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.62255577.chunk.js","sourcesContent":["export const SETTINGS = {\r\n  DURATION_TURN: 5,\r\n  POSITION_START: { x: 5, y: 5 },\r\n  INVENTORY_SIZE: 6,\r\n  PLAYER_HP_MAX: 100,\r\n  PLAYER_AP_MAX: 4,\r\n  ITEM_SEARCH_FREQUENCY_THRESHOLDS: [\r\n    0, 60, 90, 100, 100, 100, 100, 100, 100, 100, 100,\r\n  ],\r\n};\r\n","import { SETTINGS } from \"../constants/SETTINGS\";\r\n\r\nexport class Phase {\r\n  turn;\r\n  isNight;\r\n  untilNextTurn;\r\n\r\n  constructor() {\r\n    this.turn = 1;\r\n    this.isNight = false;\r\n    this.untilNextTurn = SETTINGS.DURATION_TURN;\r\n  }\r\n}\r\n","export class Item {\r\n  id: number;\r\n  name: string;\r\n  frequency: number;\r\n\r\n  constructor(id: number, name: string, frequency: number) {\r\n    this.id = id;\r\n    this.name = name;\r\n    this.frequency = frequency;\r\n  }\r\n}\r\n","import { Item } from \"../models/Item\";\r\nimport { SETTINGS } from \"./SETTINGS\";\r\n\r\nexport const ITEM_REGISTRY = [\r\n  new Item(0, \" \", -1),\r\n  new Item(1, \"Log\", 0),\r\n  new Item(2, \"Plank\", 1),\r\n  new Item(3, \"Iron Ore\", 2),\r\n  new Item(4, \"Iron Bar\", 1),\r\n  new Item(5, \"Iron Sheet\", 2),\r\n  new Item(6, \"Broken Circuit Board\", 1),\r\n  new Item(7, \"Electronic Component\", 2),\r\n  new Item(8, \"Transistor Radio\", 999),\r\n];\r\n\r\nexport const generateItem = (): Item => {\r\n  const randomNumber = 100 * Math.random();\r\n  for (\r\n    let frequency = 0;\r\n    frequency < SETTINGS.ITEM_SEARCH_FREQUENCY_THRESHOLDS.length - 1;\r\n    frequency++\r\n  ) {\r\n    if (\r\n      randomNumber > SETTINGS.ITEM_SEARCH_FREQUENCY_THRESHOLDS[frequency] &&\r\n      randomNumber < SETTINGS.ITEM_SEARCH_FREQUENCY_THRESHOLDS[frequency + 1]\r\n    ) {\r\n      const itemSubset = generateItemSubset(frequency);\r\n      const randomIndex = Math.floor(Math.random() * itemSubset.length);\r\n      const randomItem = itemSubset[randomIndex];\r\n      console.log(randomNumber + \"    \" + frequency + \"    \" + randomItem);\r\n      return randomItem;\r\n    }\r\n  }\r\n  return ITEM_REGISTRY[0];\r\n};\r\n\r\nconst generateItemSubset = (frequency: number): Item[] => {\r\n  let itemSubset = [];\r\n  for (let i = 0; i < ITEM_REGISTRY.length; i++) {\r\n    if (ITEM_REGISTRY[i].frequency === frequency) {\r\n      itemSubset.push(ITEM_REGISTRY[i]);\r\n    }\r\n  }\r\n  return itemSubset;\r\n};\r\n","import { ITEM_REGISTRY } from \"../constants/ITEM_REGISTRY\";\r\nimport { Item } from \"./Item\";\r\n\r\nexport class Inventory {\r\n  size: number;\r\n  slots: Item[];\r\n\r\n  constructor(inventorySize: number) {\r\n    this.size = inventorySize;\r\n    this.slots = new Array(inventorySize);\r\n    for (var i = 0; i < this.slots.length; i++) {\r\n      this.slots[i] = ITEM_REGISTRY[0];\r\n    }\r\n  }\r\n}\r\n","import { Inventory } from \"./Inventory\";\r\n\r\nexport class Player {\r\n  hp: number;\r\n  ap: number;\r\n  coords: {\r\n    x: number;\r\n    y: number;\r\n  };\r\n  inventory: Inventory;\r\n\r\n  constructor(hp: number, ap: number, x: number, y: number) {\r\n    this.hp = hp;\r\n    this.ap = ap;\r\n    this.coords = {\r\n      x: x,\r\n      y: y,\r\n    };\r\n    this.inventory = new Inventory(6);\r\n  }\r\n}\r\n","import { Item } from \"./Item\";\r\nimport { Player } from \"./Player\";\r\nimport { Tiletype } from \"./Tiletype\";\r\n\r\nexport class Cell {\r\n  type: Tiletype;\r\n  coords: {\r\n    x: number;\r\n    y: number;\r\n  };\r\n  characters: Player[];\r\n  items: Item[];\r\n\r\n  constructor(type: Tiletype, x: number, y: number) {\r\n    this.type = type;\r\n    this.coords = {\r\n      x: x,\r\n      y: y,\r\n    };\r\n    this.characters = [];\r\n    this.items = [];\r\n  }\r\n}\r\n","import styled from \"styled-components\";\r\nimport { Player } from \"../models/Player\";\r\nimport { Tiletype } from \"../models/Tiletype\";\r\n\r\ninterface CellTileProps {\r\n  characters: Player[];\r\n  tiletype: Tiletype;\r\n  onClick: React.MouseEventHandler;\r\n}\r\n\r\nexport const CellTile = styled.button<CellTileProps>`\r\n  width: 50px;\r\n  height: 50px;\r\n  font-size: ${(props) => (props.characters.length === 0 ? \"8px\" : \"8px\")};\r\n  background: ${(props) =>\r\n    props.characters.length === 0\r\n      ? props.tiletype.color\r\n      : \"repeating-linear-gradient(45deg, white, white 10px, \" +\r\n        props.tiletype.color +\r\n        \" 10px,  \" +\r\n        props.tiletype.color +\r\n        \" 20px)\"};\r\n  color: ${(props) => (props.characters.length === 0 ? \"black\" : \"white\")};\r\n  font-weight: ${(props) =>\r\n    props.characters.length === 0 ? \"normal\" : \"bold\"};\r\n  border: 1px solid white;\r\n  border-collapse: collapse;\r\n`;\r\n","import React from \"react\";\r\nimport { Cell } from \"../models/Cell\";\r\nimport { CellTile } from \"./CellTile\";\r\n\r\ninterface MapProps {\r\n  tiles: Cell[][];\r\n  onClick: (col: number, row: number) => void;\r\n}\r\n\r\nexport class Map extends React.Component<MapProps> {\r\n  render() {\r\n    var Cells = [];\r\n    for (var row = 0; row < this.props.tiles.length; row++) {\r\n      for (var col = 0; col < this.props.tiles[row].length; col++) {\r\n        var handleClickTileBound = this.props.onClick.bind(this, col, row);\r\n        Cells.push(\r\n          <CellTile\r\n            key={\"Cell\" + col + \":\" + row}\r\n            tiletype={this.props.tiles[col][row].type}\r\n            characters={this.props.tiles[col][row].characters}\r\n            onClick={handleClickTileBound}\r\n          >\r\n            {this.props.tiles[col][row].characters.length !== 0\r\n              ? \"X\"\r\n              : \"(\" + col + \",\" + row + \")\"}\r\n          </CellTile>\r\n        );\r\n      }\r\n      Cells.push(<br key={\"LineBreak\" + row} />);\r\n    }\r\n    return Cells;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Phase } from \"../models/Phase\";\r\nimport { Player } from \"../models/Player.js\";\r\nimport { SETTINGS } from \"../constants/SETTINGS\";\r\n\r\ninterface StatusBarProps {\r\n  phase: Phase;\r\n  characters: Player[];\r\n}\r\n\r\nexport class StatusBar extends React.Component<StatusBarProps> {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <b>Status bar</b>\r\n        <br />\r\n        Turn: {this.props.phase.turn} (00:00:0{this.props.phase.untilNextTurn})\r\n        <br />\r\n        Action points: {this.props.characters[0].ap} / {SETTINGS.PLAYER_AP_MAX}\r\n        <br />\r\n        Health points: {this.props.characters[0].hp} / {SETTINGS.PLAYER_HP_MAX}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\ninterface ActionBarProps {\r\n  onClick: React.MouseEventHandler;\r\n}\r\n\r\nexport class ActionBar extends React.Component<ActionBarProps> {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <b>Actions</b>\r\n        <br />\r\n        <input\r\n          className=\"action\"\r\n          type=\"button\"\r\n          value=\"Search\"\r\n          onClick={this.props.onClick}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const ItemTile = styled.input`\r\n  width: 150px;\r\n  height: 40px;\r\n  margin: 3px 3px 3px 3px;\r\n  background-color: rgb(225, 137, 155);\r\n`;\r\n","import React from \"react\";\r\nimport { Player } from \"../models/Player\";\r\nimport { ItemTile } from \"./ItemTile\";\r\n\r\ninterface InventoryBarProps {\r\n  characters: Player[];\r\n  onClick: (slot: number) => void;\r\n}\r\n\r\nexport class InventoryBar extends React.Component<InventoryBarProps> {\r\n  render() {\r\n    var itemListComponents = new Array(this.props.characters[0].inventory.size);\r\n    for (var i = 0; i < itemListComponents.length; i++) {\r\n      var handleClickItemInventoryBound = this.props.onClick.bind(this, i);\r\n      itemListComponents[i] = (\r\n        <ItemTile\r\n          type=\"submit\"\r\n          key={\"ItemInventoryInput\" + i}\r\n          value={this.props.characters[0].inventory.slots[i].name}\r\n          onClick={handleClickItemInventoryBound}\r\n        />\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        <b>Inventory</b>\r\n        <br />\r\n        {itemListComponents}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Cell } from \"../models/Cell\";\r\nimport { Player } from \"../models/Player\";\r\nimport { ItemTile } from \"./ItemTile\";\r\n\r\ninterface CellBarProps {\r\n  characters: Player[];\r\n  tiles: Cell[][];\r\n  onClick: (slot: number) => void;\r\n}\r\n\r\nexport class CellBar extends React.Component<CellBarProps> {\r\n  render() {\r\n    var x = this.props.characters[0].coords.x;\r\n    var y = this.props.characters[0].coords.y;\r\n    var itemListComponents = new Array(this.props.tiles[x][y].items.length);\r\n    for (var i = 0; i < this.props.tiles[x][y].items.length; i++) {\r\n      var handleClickItemTileBound = this.props.onClick.bind(this, i);\r\n      itemListComponents[i] = (\r\n        <ItemTile\r\n          className=\"item\"\r\n          type=\"submit\"\r\n          key={\"ItemTileInput\" + i}\r\n          value={this.props.tiles[x][y].items[i].name}\r\n          onClick={handleClickItemTileBound}\r\n        />\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        <b>\r\n          {this.props.tiles[x][y].type.name} ({x}, {y})\r\n        </b>\r\n        <br />\r\n        <div className=\"item-panel\">{itemListComponents}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport class CraftBar extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <b>Craft</b>\r\n        <br />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","export class Tiletype {\r\n  id: number;\r\n  name: string;\r\n  color: string;\r\n\r\n  constructor(id: number, name: string, color: string) {\r\n    this.id = id;\r\n    this.name = name;\r\n    this.color = color;\r\n  }\r\n}\r\n","import { Tiletype } from \"../models/Tiletype\";\r\n\r\nexport const TILETYPE_REGISTRY = [\r\n  new Tiletype(0, \"Forest\", \"#32a871\"),\r\n  new Tiletype(1, \"Starship\", \"#929da6\"),\r\n  new Tiletype(2, \"Impact Cleaning\", \"#76a693\"),\r\n];\r\n","import React from \"react\";\r\nimport \"../styles/App.css\";\r\n\r\nimport { Phase } from \"../models/Phase\";\r\nimport { Player } from \"../models/Player\";\r\nimport { Cell } from \"../models/Cell\";\r\n\r\nimport { Map } from \"./Map\";\r\nimport { StatusBar } from \"./StatusBar\";\r\nimport { ActionBar } from \"./ActionBar\";\r\nimport { InventoryBar } from \"./InventoryBar\";\r\nimport { CellBar } from \"./CellBar\";\r\nimport { CraftBar } from \"./CraftBar\";\r\n\r\nimport { SETTINGS } from \"../constants/SETTINGS\";\r\nimport { ITEM_REGISTRY, generateItem } from \"../constants/ITEM_REGISTRY\";\r\nimport { TILETYPE_REGISTRY } from \"../constants/TILETYPE_REGISTRY\";\r\n\r\ninterface GameProps {}\r\n\r\ninterface GameState {\r\n  characters: Player[];\r\n  phase: Phase;\r\n  tiles: Cell[][];\r\n}\r\n\r\nclass Game extends React.Component<GameProps, GameState> {\r\n  constructor(props: GameProps) {\r\n    super(props);\r\n\r\n    // Set initial tiles\r\n    var initialTiles = new Array(11);\r\n    for (var col = 0; col < initialTiles.length; col++) {\r\n      initialTiles[col] = new Array(11);\r\n      for (var row = 0; row < initialTiles[col].length; row++) {\r\n        initialTiles[col][row] = new Cell(TILETYPE_REGISTRY[0], col, row);\r\n      }\r\n    }\r\n\r\n    initialTiles[5][5].characters.push(\r\n      new Player(\r\n        SETTINGS.PLAYER_HP_MAX,\r\n        SETTINGS.PLAYER_AP_MAX,\r\n        SETTINGS.POSITION_START.x,\r\n        SETTINGS.POSITION_START.y\r\n      )\r\n    );\r\n    initialTiles[5][5].type = TILETYPE_REGISTRY[1];\r\n    initialTiles[4][4].type = TILETYPE_REGISTRY[2];\r\n    initialTiles[5][4].type = TILETYPE_REGISTRY[2];\r\n    initialTiles[6][4].type = TILETYPE_REGISTRY[2];\r\n    initialTiles[4][5].type = TILETYPE_REGISTRY[2];\r\n    initialTiles[6][5].type = TILETYPE_REGISTRY[2];\r\n    initialTiles[4][6].type = TILETYPE_REGISTRY[2];\r\n    initialTiles[5][6].type = TILETYPE_REGISTRY[2];\r\n    initialTiles[6][6].type = TILETYPE_REGISTRY[2];\r\n\r\n    // Set initial characters\r\n    var initialCharacters = [];\r\n    initialCharacters.push(\r\n      new Player(\r\n        SETTINGS.PLAYER_HP_MAX,\r\n        SETTINGS.PLAYER_AP_MAX,\r\n        SETTINGS.POSITION_START.x,\r\n        SETTINGS.POSITION_START.y\r\n      )\r\n    );\r\n\r\n    // Set initial phase\r\n    var initialPhase = new Phase();\r\n\r\n    this.state = {\r\n      tiles: initialTiles,\r\n      characters: initialCharacters,\r\n      phase: initialPhase,\r\n    };\r\n\r\n    this.handleClickTile = this.handleClickTile.bind(this);\r\n    this.handleClickSearch = this.handleClickSearch.bind(this);\r\n    this.handleClickItemInventory = this.handleClickItemInventory.bind(this);\r\n    this.handleClickItemTile = this.handleClickItemTile.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    setInterval(this.gameLoop.bind(this), 1000);\r\n  }\r\n\r\n  gameLoop() {\r\n    if (this.state.phase.untilNextTurn > 1) {\r\n      let updatedPhase = this.state.phase;\r\n      updatedPhase.untilNextTurn -= 1;\r\n\r\n      this.setState({ phase: updatedPhase });\r\n    } else {\r\n      let updatedPhase = this.state.phase;\r\n      updatedPhase.turn += 1;\r\n      updatedPhase.untilNextTurn = SETTINGS.DURATION_TURN;\r\n\r\n      let updatedCharacters = this.state.characters;\r\n      updatedCharacters[0].ap < 4 && (updatedCharacters[0].ap += 1);\r\n\r\n      this.setState({ characters: updatedCharacters, phase: updatedPhase });\r\n    }\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <table>\r\n        <tbody>\r\n          <tr>\r\n            <td rowSpan={3}>\r\n              <Map tiles={this.state.tiles} onClick={this.handleClickTile} />\r\n            </td>\r\n            <td colSpan={3} className=\"aux-window\">\r\n              <StatusBar\r\n                phase={this.state.phase}\r\n                characters={this.state.characters}\r\n              />\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td colSpan={3} className=\"aux-window\">\r\n              <ActionBar onClick={this.handleClickSearch} />\r\n            </td>\r\n          </tr>\r\n          <tr>\r\n            <td className=\"aux-window\">\r\n              <InventoryBar\r\n                characters={this.state.characters}\r\n                onClick={this.handleClickItemInventory}\r\n              />\r\n            </td>\r\n            <td className=\"aux-window\">\r\n              <CellBar\r\n                tiles={this.state.tiles}\r\n                characters={this.state.characters}\r\n                onClick={this.handleClickItemTile}\r\n              />\r\n            </td>\r\n            <td className=\"aux-window\">\r\n              <CraftBar />\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    );\r\n  }\r\n\r\n  handleClickTile(col: number, row: number) {\r\n    if (this.state.characters[0].ap > 0) {\r\n      if (this.distCellToCharacter(col, row) === 1) {\r\n        let updatedCharacters = this.state.characters;\r\n        updatedCharacters[0].ap -= 1;\r\n\r\n        const oldX = this.state.characters[0].coords.x;\r\n        const oldY = this.state.characters[0].coords.y;\r\n\r\n        updatedCharacters[0].coords = {\r\n          x: col,\r\n          y: row,\r\n        };\r\n\r\n        let updatedTiles = this.state.tiles;\r\n        updatedTiles[oldX][oldY].characters = [];\r\n        updatedTiles[col][row].characters.push(updatedCharacters[0]);\r\n\r\n        this.setState({ characters: updatedCharacters, tiles: updatedTiles });\r\n      }\r\n    } else {\r\n      alert(\"You are out of action points\");\r\n    }\r\n  }\r\n\r\n  handleClickSearch() {\r\n    if (this.state.characters[0].ap > 0) {\r\n      let updatedCharacters = this.state.characters;\r\n      updatedCharacters[0].ap -= 1;\r\n\r\n      let fillPosition = -1;\r\n      for (let i = 0; i < this.state.characters[0].inventory.size; i++) {\r\n        if (this.state.characters[0].inventory.slots[i] === ITEM_REGISTRY[0]) {\r\n          fillPosition = i;\r\n          break;\r\n        }\r\n      }\r\n\r\n      const randomIndex = Math.floor(Math.random() * ITEM_REGISTRY.length);\r\n      if (fillPosition !== -1) {\r\n        updatedCharacters[0].inventory.slots[fillPosition] = generateItem();\r\n\r\n        this.setState({ characters: updatedCharacters });\r\n      } else {\r\n        let updatedTiles = this.state.tiles;\r\n        const x = this.state.characters[0].coords.x;\r\n        const y = this.state.characters[0].coords.y;\r\n        updatedTiles[x][y].items.push(ITEM_REGISTRY[randomIndex]);\r\n\r\n        this.setState({ tiles: updatedTiles });\r\n      }\r\n    } else {\r\n      alert(\"You are out of action points\");\r\n    }\r\n  }\r\n\r\n  handleClickItemInventory(slot: number) {\r\n    if (\r\n      this.state.characters[0].inventory.slots[slot].id !== ITEM_REGISTRY[0].id\r\n    ) {\r\n      const x = this.state.characters[0].coords.x;\r\n      const y = this.state.characters[0].coords.y;\r\n\r\n      let updatedCharacters = this.state.characters;\r\n      let updatedTiles = this.state.tiles;\r\n\r\n      updatedTiles[x][y].items.push(\r\n        this.state.characters[0].inventory.slots[slot]\r\n      );\r\n      updatedCharacters[0].inventory.slots[slot] = ITEM_REGISTRY[0];\r\n\r\n      this.setState({ characters: updatedCharacters, tiles: updatedTiles });\r\n    }\r\n  }\r\n\r\n  handleClickItemTile(slot: number) {\r\n    let fillPosition = -1;\r\n    for (var i = 0; i < this.state.characters[0].inventory.size; i++) {\r\n      if (this.state.characters[0].inventory.slots[i] === ITEM_REGISTRY[0]) {\r\n        fillPosition = i;\r\n        break;\r\n      }\r\n    }\r\n    if (fillPosition !== -1) {\r\n      const x = this.state.characters[0].coords.x;\r\n      const y = this.state.characters[0].coords.y;\r\n\r\n      let updatedCharacters = this.state.characters;\r\n      let updatedTiles = this.state.tiles;\r\n\r\n      updatedCharacters[0].inventory.slots[fillPosition] =\r\n        this.state.tiles[x][y].items[slot];\r\n      updatedTiles[x][y].items.splice(slot, 1);\r\n\r\n      this.setState({ characters: updatedCharacters, tiles: updatedTiles });\r\n    }\r\n  }\r\n\r\n  distCellToCharacter(col: number, row: number) {\r\n    return Math.max(\r\n      Math.abs(\r\n        this.state.tiles[col][row].coords.x - this.state.characters[0].coords.x\r\n      ),\r\n      Math.abs(\r\n        this.state.tiles[col][row].coords.y - this.state.characters[0].coords.y\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import \"../styles/App.css\";\nimport Game from \"./Game\";\n\nfunction App() {\n  return <Game />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App.tsx\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}