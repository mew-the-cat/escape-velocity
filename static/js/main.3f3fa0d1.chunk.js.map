{"version":3,"sources":["constants/ALERT_VARIANTS.ts","models/AlertText.ts","constants/ALERT_TEXTS.ts","constants/SETTINGS.ts","models/Phase.ts","models/Item.ts","constants/ITEM_REGISTRY.ts","models/Inventory.ts","models/Player.ts","models/Cell.ts","components/CellTile.tsx","components/Map.tsx","components/StatusBar.tsx","components/ActionBar.tsx","components/ItemTile.tsx","components/InventoryBar.tsx","components/CellBar.tsx","components/CraftBar.tsx","models/Tiletype.ts","constants/TILETYPE_REGISTRY.ts","components/AlertBar.tsx","components/Game.tsx","components/App.tsx","reportWebVitals.js","index.js"],"names":["ALERT_VARIANT","AlertText","header","body","variant","this","ALERT_TEXTS","START","PRIMARY","OUT_OF_AP","WARNING","SETTINGS","x","y","Phase","turn","untilNextTurn","isNight","alertActive","untilAlertDismissed","Item","id","name","frequency","ITEM_REGISTRY","generateItemSubset","itemSubset","i","length","push","Inventory","inventorySize","size","slots","Array","Player","hp","ap","coords","inventory","Cell","type","characters","items","CellTile","styled","button","props","tiletype","color","Map","Cells","row","tiles","col","handleClickTileBound","onClick","bind","React","Component","StatusBar","phase","ActionBar","className","value","ItemTile","input","InventoryBar","itemListComponents","handleClickItemInventoryBound","CellBar","handleClickItemTileBound","CraftBar","Tiletype","TILETYPE_REGISTRY","AlertBar","alertText","isVisible","Alert","show","Heading","Game","initialTiles","initialCharacters","initialPhase","state","handleClickTile","handleClickSearch","handleClickItemInventory","handleClickItemTile","setInterval","gameLoop","updatedCharacters","updatedPhase","setState","rowSpan","colSpan","distCellToCharacter","oldX","oldY","updatedTiles","handleDisplayAlert","fillPosition","randomIndex","Math","floor","random","randomNumber","generateItem","slot","splice","alert","max","abs","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3f3fa0d1.chunk.js","sourcesContent":["export enum ALERT_VARIANT {\r\n  WARNING = \"warning\",\r\n  PRIMARY = \"primary\",\r\n}\r\n","export class AlertText {\r\n  header: string;\r\n  body: string;\r\n  variant: string;\r\n\r\n  constructor(header: string, body: string, variant: string) {\r\n    this.header = header;\r\n    this.body = body;\r\n    this.variant = variant;\r\n  }\r\n}\r\n","import { AlertText } from \"../models/AlertText\";\r\nimport { ALERT_VARIANT } from \"./ALERT_VARIANTS\";\r\n\r\nexport const ALERT_TEXTS = {\r\n  START: new AlertText(\r\n    \"Your starship was heavily...\",\r\n    \"damaged during an orbital fight. Pilots managed to perform an emergency landing on the planet below. The vessel is irreversibly damaged. Fellow crew is dead. Endless jungle covering the entire surface...\",\r\n    ALERT_VARIANT.PRIMARY\r\n  ),\r\n  OUT_OF_AP: new AlertText(\r\n    \"Out of Action Points\",\r\n    \"You are too tired to perform this action and need to chill for a  while. AP recover with time. Action Points recover gradually with time.\",\r\n    ALERT_VARIANT.WARNING\r\n  ),\r\n};\r\n","export const SETTINGS = {\r\n  DURATION_TURN: 5,\r\n  POSITION_START: { x: 5, y: 5 },\r\n  INVENTORY_SIZE: 6,\r\n  PLAYER_HP_MAX: 100,\r\n  PLAYER_AP_MAX: 4,\r\n  ITEM_SEARCH_FREQUENCY_THRESHOLDS: [\r\n    0, 60, 90, 100, 100, 100, 100, 100, 100, 100, 100,\r\n  ],\r\n  DURATION_ALERT: 5,\r\n};\r\n","import { ALERT_TEXTS } from \"../constants/ALERT_TEXTS\";\r\nimport { SETTINGS } from \"../constants/SETTINGS\";\r\nimport { AlertText } from \"./AlertText\";\r\n\r\nexport class Phase {\r\n  turn: number;\r\n  untilNextTurn: number;\r\n  isNight: boolean;\r\n  alertActive: AlertText;\r\n  untilAlertDismissed: number;\r\n\r\n  constructor() {\r\n    this.turn = 1;\r\n    this.untilNextTurn = SETTINGS.DURATION_TURN;\r\n    this.isNight = false;\r\n    this.untilAlertDismissed = 0;\r\n    this.alertActive = ALERT_TEXTS.START;\r\n    this.untilAlertDismissed = 1200;\r\n  }\r\n}\r\n","export class Item {\r\n  id: number;\r\n  name: string;\r\n  frequency: number;\r\n\r\n  constructor(id: number, name: string, frequency: number) {\r\n    this.id = id;\r\n    this.name = name;\r\n    this.frequency = frequency;\r\n  }\r\n}\r\n","import { Item } from \"../models/Item\";\r\nimport { SETTINGS } from \"./SETTINGS\";\r\n\r\nexport const ITEM_REGISTRY = [\r\n  new Item(0, \" \", -1),\r\n  new Item(1, \"Log\", 0),\r\n  new Item(2, \"Plank\", 1),\r\n  new Item(3, \"Iron Ore\", 2),\r\n  new Item(4, \"Iron Bar\", 1),\r\n  new Item(5, \"Iron Sheet\", 2),\r\n  new Item(6, \"Broken Circuit Board\", 1),\r\n  new Item(7, \"Electronic Component\", 2),\r\n  new Item(8, \"Transistor Radio\", 999),\r\n];\r\n\r\nexport const generateItem = (): Item => {\r\n  const randomNumber = 100 * Math.random();\r\n  for (\r\n    let frequency = 0;\r\n    frequency < SETTINGS.ITEM_SEARCH_FREQUENCY_THRESHOLDS.length - 1;\r\n    frequency++\r\n  ) {\r\n    if (\r\n      randomNumber > SETTINGS.ITEM_SEARCH_FREQUENCY_THRESHOLDS[frequency] &&\r\n      randomNumber < SETTINGS.ITEM_SEARCH_FREQUENCY_THRESHOLDS[frequency + 1]\r\n    ) {\r\n      const itemSubset = generateItemSubset(frequency);\r\n      const randomIndex = Math.floor(Math.random() * itemSubset.length);\r\n      const randomItem = itemSubset[randomIndex];\r\n      //console.log(randomNumber + \"    \" + frequency + \"    \" + randomItem);\r\n      return randomItem;\r\n    }\r\n  }\r\n  return ITEM_REGISTRY[0];\r\n};\r\n\r\nconst generateItemSubset = (frequency: number): Item[] => {\r\n  let itemSubset = [];\r\n  for (let i = 0; i < ITEM_REGISTRY.length; i++) {\r\n    if (ITEM_REGISTRY[i].frequency === frequency) {\r\n      itemSubset.push(ITEM_REGISTRY[i]);\r\n    }\r\n  }\r\n  return itemSubset;\r\n};\r\n","import { ITEM_REGISTRY } from \"../constants/ITEM_REGISTRY\";\r\nimport { Item } from \"./Item\";\r\n\r\nexport class Inventory {\r\n  size: number;\r\n  slots: Item[];\r\n\r\n  constructor(inventorySize: number) {\r\n    this.size = inventorySize;\r\n    this.slots = new Array(inventorySize);\r\n    for (var i = 0; i < this.slots.length; i++) {\r\n      this.slots[i] = ITEM_REGISTRY[0];\r\n    }\r\n  }\r\n}\r\n","import { Inventory } from \"./Inventory\";\r\n\r\nexport class Player {\r\n  hp: number;\r\n  ap: number;\r\n  coords: {\r\n    x: number;\r\n    y: number;\r\n  };\r\n  inventory: Inventory;\r\n\r\n  constructor(hp: number, ap: number, x: number, y: number) {\r\n    this.hp = hp;\r\n    this.ap = ap;\r\n    this.coords = {\r\n      x: x,\r\n      y: y,\r\n    };\r\n    this.inventory = new Inventory(6);\r\n  }\r\n}\r\n","import { Item } from \"./Item\";\r\nimport { Player } from \"./Player\";\r\nimport { Tiletype } from \"./Tiletype\";\r\n\r\nexport class Cell {\r\n  type: Tiletype;\r\n  coords: {\r\n    x: number;\r\n    y: number;\r\n  };\r\n  characters: Player[];\r\n  items: Item[];\r\n\r\n  constructor(type: Tiletype, x: number, y: number) {\r\n    this.type = type;\r\n    this.coords = {\r\n      x: x,\r\n      y: y,\r\n    };\r\n    this.characters = [];\r\n    this.items = [];\r\n  }\r\n}\r\n","import styled from \"styled-components\";\r\nimport { Player } from \"../models/Player\";\r\nimport { Tiletype } from \"../models/Tiletype\";\r\n\r\ninterface CellTileProps {\r\n  characters: Player[];\r\n  tiletype: Tiletype;\r\n  onClick: React.MouseEventHandler;\r\n}\r\n\r\nexport const CellTile = styled.button<CellTileProps>`\r\n  width: 50px;\r\n  height: 50px;\r\n  font-size: ${(props) => (props.characters.length === 0 ? \"8px\" : \"8px\")};\r\n  background: ${(props) =>\r\n    props.characters.length === 0\r\n      ? props.tiletype.color\r\n      : \"repeating-linear-gradient(45deg, white, white 10px, \" +\r\n        props.tiletype.color +\r\n        \" 10px,  \" +\r\n        props.tiletype.color +\r\n        \" 20px)\"};\r\n  color: ${(props) => (props.characters.length === 0 ? \"black\" : \"white\")};\r\n  font-weight: ${(props) =>\r\n    props.characters.length === 0 ? \"normal\" : \"bold\"};\r\n  border: 1px solid white;\r\n  border-collapse: collapse;\r\n  border-radius: 5px;\r\n`;\r\n","import React from \"react\";\r\nimport { Cell } from \"../models/Cell\";\r\nimport { CellTile } from \"./CellTile\";\r\n\r\ninterface MapProps {\r\n  tiles: Cell[][];\r\n  onClick: (col: number, row: number) => void;\r\n}\r\n\r\nexport class Map extends React.Component<MapProps> {\r\n  render() {\r\n    var Cells = [];\r\n    for (var row = 0; row < this.props.tiles.length; row++) {\r\n      for (var col = 0; col < this.props.tiles[row].length; col++) {\r\n        var handleClickTileBound = this.props.onClick.bind(this, col, row);\r\n        Cells.push(\r\n          <CellTile\r\n            key={\"Cell\" + col + \":\" + row}\r\n            tiletype={this.props.tiles[col][row].type}\r\n            characters={this.props.tiles[col][row].characters}\r\n            onClick={handleClickTileBound}\r\n          >\r\n            {this.props.tiles[col][row].characters.length !== 0\r\n              ? \"X\"\r\n              : \"(\" + col + \",\" + row + \")\"}\r\n          </CellTile>\r\n        );\r\n      }\r\n      Cells.push(<br key={\"LineBreak\" + row} />);\r\n    }\r\n    return Cells;\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Phase } from \"../models/Phase\";\r\nimport { Player } from \"../models/Player.js\";\r\nimport { SETTINGS } from \"../constants/SETTINGS\";\r\n\r\ninterface StatusBarProps {\r\n  phase: Phase;\r\n  characters: Player[];\r\n}\r\n\r\nexport class StatusBar extends React.Component<StatusBarProps> {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <b>Status bar</b>\r\n        <br />\r\n        Turn: {this.props.phase.turn} (00:00:0{this.props.phase.untilNextTurn})\r\n        <br />\r\n        Action Points: {this.props.characters[0].ap} / {SETTINGS.PLAYER_AP_MAX}\r\n        <br />\r\n        Health Points: {this.props.characters[0].hp} / {SETTINGS.PLAYER_HP_MAX}\r\n        <br />\r\n        <br />\r\n        <br />\r\n        <br />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\ninterface ActionBarProps {\r\n  onClick: React.MouseEventHandler;\r\n}\r\n\r\nexport class ActionBar extends React.Component<ActionBarProps> {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <b>Actions</b>\r\n        <br />\r\n        <input\r\n          className=\"action\"\r\n          type=\"button\"\r\n          value=\"Search\"\r\n          onClick={this.props.onClick}\r\n        />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import styled from \"styled-components\";\r\n\r\nexport const ItemTile = styled.input`\r\n  width: 90%;\r\n  height: 40px;\r\n  margin: 3px 3px 3px 3px;\r\n  background-color: rgb(148, 148, 184);\r\n  border-radius: 5px;\r\n  border: 2px solid rgb(209, 209, 224);\r\n  color: white;\r\n`;\r\n","import React from \"react\";\r\nimport { Player } from \"../models/Player\";\r\nimport { ItemTile } from \"./ItemTile\";\r\n\r\ninterface InventoryBarProps {\r\n  characters: Player[];\r\n  onClick: (slot: number) => void;\r\n}\r\n\r\nexport class InventoryBar extends React.Component<InventoryBarProps> {\r\n  render() {\r\n    var itemListComponents = new Array(this.props.characters[0].inventory.size);\r\n    for (var i = 0; i < itemListComponents.length; i++) {\r\n      var handleClickItemInventoryBound = this.props.onClick.bind(this, i);\r\n      itemListComponents[i] = (\r\n        <ItemTile\r\n          type=\"submit\"\r\n          key={\"ItemInventoryInput\" + i}\r\n          value={this.props.characters[0].inventory.slots[i].name}\r\n          onClick={handleClickItemInventoryBound}\r\n        />\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        <b>Inventory</b>\r\n        <br />\r\n        {itemListComponents}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\nimport { Cell } from \"../models/Cell\";\r\nimport { Player } from \"../models/Player\";\r\nimport { ItemTile } from \"./ItemTile\";\r\n\r\ninterface CellBarProps {\r\n  characters: Player[];\r\n  tiles: Cell[][];\r\n  onClick: (slot: number) => void;\r\n}\r\n\r\nexport class CellBar extends React.Component<CellBarProps> {\r\n  render() {\r\n    var x = this.props.characters[0].coords.x;\r\n    var y = this.props.characters[0].coords.y;\r\n    var itemListComponents = new Array(this.props.tiles[x][y].items.length);\r\n    for (var i = 0; i < this.props.tiles[x][y].items.length; i++) {\r\n      var handleClickItemTileBound = this.props.onClick.bind(this, i);\r\n      itemListComponents[i] = (\r\n        <ItemTile\r\n          className=\"item\"\r\n          type=\"submit\"\r\n          key={\"ItemTileInput\" + i}\r\n          value={this.props.tiles[x][y].items[i].name}\r\n          onClick={handleClickItemTileBound}\r\n        />\r\n      );\r\n    }\r\n    return (\r\n      <div>\r\n        <b>\r\n          {this.props.tiles[x][y].type.name} ({x}, {y})\r\n        </b>\r\n        <br />\r\n        <div className=\"item-panel\">{itemListComponents}</div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nexport class CraftBar extends React.Component {\r\n  render() {\r\n    return (\r\n      <div>\r\n        <b>Craft</b>\r\n        <br />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n","export class Tiletype {\r\n  id: number;\r\n  name: string;\r\n  color: string;\r\n\r\n  constructor(id: number, name: string, color: string) {\r\n    this.id = id;\r\n    this.name = name;\r\n    this.color = color;\r\n  }\r\n}\r\n","import { Tiletype } from \"../models/Tiletype\";\r\n\r\nexport const TILETYPE_REGISTRY = [\r\n  new Tiletype(0, \"Forest\", \"#32a871\"),\r\n  new Tiletype(1, \"Starship\", \"#929da6\"),\r\n  new Tiletype(2, \"Impact Cleaning\", \"#76a693\"),\r\n];\r\n","import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport { AlertText } from \"../models/AlertText\";\r\n\r\ninterface AlertBarProps {\r\n  alertText: AlertText;\r\n  isVisible: boolean;\r\n}\r\n\r\nexport const AlertBar: React.FC<AlertBarProps> = ({ alertText, isVisible }) => {\r\n  return (\r\n    <Alert key=\"mainAlert\" show={isVisible} variant={alertText.variant}>\r\n      <Alert.Heading>{alertText.header}</Alert.Heading>\r\n      {alertText.body}\r\n    </Alert>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"../styles/App.css\";\r\n\r\nimport { Phase } from \"../models/Phase\";\r\nimport { Player } from \"../models/Player\";\r\nimport { Cell } from \"../models/Cell\";\r\n\r\nimport { Map } from \"./Map\";\r\nimport { StatusBar } from \"./StatusBar\";\r\nimport { ActionBar } from \"./ActionBar\";\r\nimport { InventoryBar } from \"./InventoryBar\";\r\nimport { CellBar } from \"./CellBar\";\r\nimport { CraftBar } from \"./CraftBar\";\r\n\r\nimport { SETTINGS } from \"../constants/SETTINGS\";\r\nimport { ITEM_REGISTRY, generateItem } from \"../constants/ITEM_REGISTRY\";\r\nimport { TILETYPE_REGISTRY } from \"../constants/TILETYPE_REGISTRY\";\r\nimport { AlertBar } from \"./AlertBar\";\r\nimport { ALERT_TEXTS } from \"../constants/ALERT_TEXTS\";\r\nimport { AlertText } from \"../models/AlertText\";\r\n\r\ninterface GameProps {}\r\n\r\ninterface GameState {\r\n  characters: Player[];\r\n  phase: Phase;\r\n  tiles: Cell[][];\r\n}\r\n\r\nclass Game extends React.Component<GameProps, GameState> {\r\n  constructor(props: GameProps) {\r\n    super(props);\r\n\r\n    // Set initial tiles\r\n    var initialTiles = new Array(11);\r\n    for (var col = 0; col < initialTiles.length; col++) {\r\n      initialTiles[col] = new Array(11);\r\n      for (var row = 0; row < initialTiles[col].length; row++) {\r\n        initialTiles[col][row] = new Cell(TILETYPE_REGISTRY[0], col, row);\r\n      }\r\n    }\r\n\r\n    initialTiles[5][5].characters.push(\r\n      new Player(\r\n        SETTINGS.PLAYER_HP_MAX,\r\n        SETTINGS.PLAYER_AP_MAX,\r\n        SETTINGS.POSITION_START.x,\r\n        SETTINGS.POSITION_START.y\r\n      )\r\n    );\r\n    initialTiles[5][5].type = TILETYPE_REGISTRY[1];\r\n    initialTiles[4][4].type = TILETYPE_REGISTRY[2];\r\n    initialTiles[5][4].type = TILETYPE_REGISTRY[2];\r\n    initialTiles[6][4].type = TILETYPE_REGISTRY[2];\r\n    initialTiles[4][5].type = TILETYPE_REGISTRY[2];\r\n    initialTiles[6][5].type = TILETYPE_REGISTRY[2];\r\n    initialTiles[4][6].type = TILETYPE_REGISTRY[2];\r\n    initialTiles[5][6].type = TILETYPE_REGISTRY[2];\r\n    initialTiles[6][6].type = TILETYPE_REGISTRY[2];\r\n\r\n    // Set initial characters\r\n    var initialCharacters = [];\r\n    initialCharacters.push(\r\n      new Player(\r\n        SETTINGS.PLAYER_HP_MAX,\r\n        SETTINGS.PLAYER_AP_MAX,\r\n        SETTINGS.POSITION_START.x,\r\n        SETTINGS.POSITION_START.y\r\n      )\r\n    );\r\n\r\n    // Set initial phase\r\n    var initialPhase = new Phase();\r\n\r\n    this.state = {\r\n      tiles: initialTiles,\r\n      characters: initialCharacters,\r\n      phase: initialPhase,\r\n    };\r\n\r\n    this.handleClickTile = this.handleClickTile.bind(this);\r\n    this.handleClickSearch = this.handleClickSearch.bind(this);\r\n    this.handleClickItemInventory = this.handleClickItemInventory.bind(this);\r\n    this.handleClickItemTile = this.handleClickItemTile.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    setInterval(this.gameLoop.bind(this), 1000);\r\n  }\r\n\r\n  gameLoop() {\r\n    const updatedCharacters = this.state.characters;\r\n    const updatedPhase = this.state.phase;\r\n\r\n    if (this.state.phase.untilNextTurn > 1) {\r\n      updatedPhase.untilNextTurn -= 1;\r\n    } else {\r\n      updatedPhase.turn += 1;\r\n      updatedPhase.untilNextTurn = SETTINGS.DURATION_TURN;\r\n      updatedCharacters[0].ap < 4 && (updatedCharacters[0].ap += 1);\r\n    }\r\n\r\n    if (updatedPhase.untilAlertDismissed > 0) {\r\n      updatedPhase.untilAlertDismissed -= 1;\r\n    }\r\n\r\n    this.setState({ characters: updatedCharacters, phase: updatedPhase });\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"window\">\r\n        <table>\r\n          <tbody>\r\n            <tr>\r\n              <td rowSpan={3}>\r\n                <Map tiles={this.state.tiles} onClick={this.handleClickTile} />\r\n              </td>\r\n              <td colSpan={1} className=\"window-aux\">\r\n                <StatusBar\r\n                  phase={this.state.phase}\r\n                  characters={this.state.characters}\r\n                />\r\n              </td>\r\n              <td colSpan={2} className=\"window-aux-alert\">\r\n                <AlertBar\r\n                  alertText={this.state.phase.alertActive}\r\n                  isVisible={this.state.phase.untilAlertDismissed > 0}\r\n                />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td colSpan={3} className=\"window-aux\">\r\n                <ActionBar onClick={this.handleClickSearch} />\r\n              </td>\r\n            </tr>\r\n            <tr>\r\n              <td className=\"window-aux\">\r\n                <InventoryBar\r\n                  characters={this.state.characters}\r\n                  onClick={this.handleClickItemInventory}\r\n                />\r\n              </td>\r\n              <td className=\"window-aux\">\r\n                <CellBar\r\n                  tiles={this.state.tiles}\r\n                  characters={this.state.characters}\r\n                  onClick={this.handleClickItemTile}\r\n                />\r\n              </td>\r\n              <td className=\"window-aux\">\r\n                <CraftBar />\r\n              </td>\r\n            </tr>\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  handleClickTile(col: number, row: number) {\r\n    if (this.state.characters[0].ap > 0) {\r\n      if (this.distCellToCharacter(col, row) === 1) {\r\n        let updatedCharacters = this.state.characters;\r\n        updatedCharacters[0].ap -= 1;\r\n\r\n        const oldX = this.state.characters[0].coords.x;\r\n        const oldY = this.state.characters[0].coords.y;\r\n\r\n        updatedCharacters[0].coords = {\r\n          x: col,\r\n          y: row,\r\n        };\r\n\r\n        let updatedTiles = this.state.tiles;\r\n        updatedTiles[oldX][oldY].characters = [];\r\n        updatedTiles[col][row].characters.push(updatedCharacters[0]);\r\n\r\n        this.setState({ characters: updatedCharacters, tiles: updatedTiles });\r\n      }\r\n    } else {\r\n      this.handleDisplayAlert(ALERT_TEXTS.OUT_OF_AP);\r\n    }\r\n  }\r\n\r\n  handleClickSearch() {\r\n    if (this.state.characters[0].ap > 0) {\r\n      let updatedCharacters = this.state.characters;\r\n      updatedCharacters[0].ap -= 1;\r\n\r\n      let fillPosition = -1;\r\n      for (let i = 0; i < this.state.characters[0].inventory.size; i++) {\r\n        if (this.state.characters[0].inventory.slots[i] === ITEM_REGISTRY[0]) {\r\n          fillPosition = i;\r\n          break;\r\n        }\r\n      }\r\n\r\n      const randomIndex = Math.floor(Math.random() * ITEM_REGISTRY.length);\r\n      if (fillPosition !== -1) {\r\n        updatedCharacters[0].inventory.slots[fillPosition] = generateItem();\r\n\r\n        this.setState({ characters: updatedCharacters });\r\n      } else {\r\n        let updatedTiles = this.state.tiles;\r\n        const x = this.state.characters[0].coords.x;\r\n        const y = this.state.characters[0].coords.y;\r\n        updatedTiles[x][y].items.push(ITEM_REGISTRY[randomIndex]);\r\n\r\n        this.setState({ tiles: updatedTiles });\r\n      }\r\n    } else {\r\n      this.handleDisplayAlert(ALERT_TEXTS.OUT_OF_AP);\r\n    }\r\n  }\r\n\r\n  handleClickItemInventory(slot: number) {\r\n    if (\r\n      this.state.characters[0].inventory.slots[slot].id !== ITEM_REGISTRY[0].id\r\n    ) {\r\n      const x = this.state.characters[0].coords.x;\r\n      const y = this.state.characters[0].coords.y;\r\n\r\n      let updatedCharacters = this.state.characters;\r\n      let updatedTiles = this.state.tiles;\r\n\r\n      updatedTiles[x][y].items.push(\r\n        this.state.characters[0].inventory.slots[slot]\r\n      );\r\n      updatedCharacters[0].inventory.slots[slot] = ITEM_REGISTRY[0];\r\n\r\n      this.setState({ characters: updatedCharacters, tiles: updatedTiles });\r\n    }\r\n  }\r\n\r\n  handleClickItemTile(slot: number) {\r\n    let fillPosition = -1;\r\n    for (var i = 0; i < this.state.characters[0].inventory.size; i++) {\r\n      if (this.state.characters[0].inventory.slots[i] === ITEM_REGISTRY[0]) {\r\n        fillPosition = i;\r\n        break;\r\n      }\r\n    }\r\n    if (fillPosition !== -1) {\r\n      const x = this.state.characters[0].coords.x;\r\n      const y = this.state.characters[0].coords.y;\r\n\r\n      let updatedCharacters = this.state.characters;\r\n      let updatedTiles = this.state.tiles;\r\n\r\n      updatedCharacters[0].inventory.slots[fillPosition] =\r\n        this.state.tiles[x][y].items[slot];\r\n      updatedTiles[x][y].items.splice(slot, 1);\r\n\r\n      this.setState({ characters: updatedCharacters, tiles: updatedTiles });\r\n    }\r\n  }\r\n\r\n  handleDisplayAlert(alert: AlertText) {\r\n    const updatedPhase = this.state.phase;\r\n    updatedPhase.alertActive = alert;\r\n    updatedPhase.untilAlertDismissed = SETTINGS.DURATION_ALERT;\r\n    this.setState({ phase: updatedPhase });\r\n  }\r\n\r\n  distCellToCharacter(col: number, row: number) {\r\n    return Math.max(\r\n      Math.abs(\r\n        this.state.tiles[col][row].coords.x - this.state.characters[0].coords.x\r\n      ),\r\n      Math.abs(\r\n        this.state.tiles[col][row].coords.y - this.state.characters[0].coords.y\r\n      )\r\n    );\r\n  }\r\n}\r\n\r\nexport default Game;\r\n","import \"../styles/App.css\";\nimport Game from \"./Game\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nfunction App() {\n  return <Game />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App.tsx\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}