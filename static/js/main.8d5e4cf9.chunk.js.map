{"version":3,"sources":["constants/ALERT_VARIANTS.ts","components/CellTile.tsx","components/Map.tsx","constants/SETTINGS.ts","components/StatusBar.tsx","components/ActionBar.tsx","models/Item.ts","constants/ITEM_REGISTRY.ts","components/AlertBar.tsx","models/AlertText.ts","constants/ALERT_TEXTS.ts","models/Tiletype.ts","constants/TILETYPE_REGISTRY.ts","models/Cell.ts","models/Phase.ts","models/Inventory.ts","models/Player.ts","utils/ItemUtils.ts","components/ItemTile.tsx","components/InventoryBarList.tsx","components/InventoryBarWrapper.tsx","components/CellBarList.tsx","components/CellBarWrapper.tsx","components/CraftBar.tsx","components/ItemBar.tsx","components/Game.tsx","utils/GameUtils.ts","components/App.tsx","reportWebVitals.js","index.js"],"names":["ALERT_VARIANT","CellTile","styled","button","props","characters","length","tiletype","color","Map","tiles","onClick","Cells","row","col","handleClickTileBound","bind","push","type","className","SETTINGS","x","y","StatusBar","phase","turn","untilNextTurn","ap","hp","ActionBar","value","Item","id","name","frequency","this","ITEM_REGISTRY","AlertBar","alertText","isVisible","Alert","show","variant","Heading","header","body","AlertText","ALERT_TEXTS","START","PRIMARY","OUT_OF_AP","WARNING","Tiletype","TILETYPE_REGISTRY","Cell","coords","items","Phase","isNight","alertActive","untilAlertDismissed","Inventory","inventorySize","size","slots","Array","i","Player","inventory","generateItemSubset","itemSubset","ItemTile","input","InventoryBarList","onDragEnd","droppableId","provided","droppableProps","ref","innerRef","map","item","index","draggableId","draggableProps","dragHandleProps","placeholder","InventoryBarWrapper","CellBarList","CellBarWrapper","CraftBar","ItemBar","onClickInventory","onClickCell","Game","initialState","initialTiles","initialCharacters","generateInitialState","useState","setCharacters","setPhase","setTiles","forceUpdate","setValue","useForceUpdate","gameLoop","updatedCharacters","updatedPhase","handleDisplayAlert","alert","distCellToCharacter","Math","max","abs","useEffect","setInterval","oldX","oldY","updatedTiles","slot","fillPosition","splice","result","console","log","destination","itemsSource","itemsDestination","source","from","reorderedItem","randomIndex","floor","random","randomNumber","generateItem","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.8d5e4cf9.chunk.js","sourcesContent":["export enum ALERT_VARIANT {\r\n  WARNING = \"warning\",\r\n  PRIMARY = \"primary\",\r\n}\r\n","import styled from \"styled-components\";\r\nimport { Player } from \"../models/Player\";\r\nimport { Tiletype } from \"../models/Tiletype\";\r\n\r\ninterface CellTileProps {\r\n  characters: Player[];\r\n  tiletype: Tiletype;\r\n  onClick: React.MouseEventHandler;\r\n}\r\n\r\nexport const CellTile = styled.button<CellTileProps>`\r\n  width: 9%;\r\n  height: 9%;\r\n\r\n  font-size: ${(props) => (props.characters.length === 0 ? \"8px\" : \"8px\")};\r\n  background: ${(props) =>\r\n    props.characters.length === 0\r\n      ? props.tiletype.color\r\n      : \"repeating-linear-gradient(45deg, white, white 10px, \" +\r\n        props.tiletype.color +\r\n        \" 10px,  \" +\r\n        props.tiletype.color +\r\n        \" 20px)\"};\r\n  color: ${(props) => (props.characters.length === 0 ? \"black\" : \"white\")};\r\n  font-weight: ${(props) =>\r\n    props.characters.length === 0 ? \"normal\" : \"bold\"};\r\n  border: 1px solid white;\r\n  border-collapse: collapse;\r\n  border-radius: 5px;\r\n`;\r\n","import React from \"react\";\r\nimport { Cell } from \"../models/Cell\";\r\nimport { CellTile } from \"./CellTile\";\r\n\r\ninterface MapProps {\r\n  tiles: Cell[][];\r\n  onClick: (col: number, row: number) => void;\r\n}\r\n\r\nexport const Map: React.FC<MapProps> = ({ tiles, onClick }) => {\r\n  const Cells = [];\r\n\r\n  for (let row = 0; row < tiles.length; row++) {\r\n    for (let col = 0; col < tiles[row].length; col++) {\r\n      const handleClickTileBound = onClick.bind(this, col, row);\r\n      Cells.push(\r\n        <CellTile\r\n          key={\"Cell\" + col + \":\" + row}\r\n          tiletype={tiles[col][row].type}\r\n          characters={tiles[col][row].characters}\r\n          onClick={handleClickTileBound}\r\n        >\r\n          {tiles[col][row].characters.length !== 0\r\n            ? \"X\"\r\n            : \"(\" + col + \",\" + row + \")\"}\r\n        </CellTile>\r\n      );\r\n    }\r\n    Cells.push(<br key={\"LineBreak\" + row} />);\r\n  }\r\n  return <span className=\"map\">{Cells}</span>;\r\n};\r\n","export const SETTINGS = {\r\n  DURATION_TURN: 5,\r\n  POSITION_START: { x: 5, y: 5 },\r\n  INVENTORY_SIZE: 6,\r\n  PLAYER_HP_MAX: 100,\r\n  PLAYER_AP_MAX: 4,\r\n  ITEM_SEARCH_FREQUENCY_THRESHOLDS: [\r\n    0, 60, 90, 100, 100, 100, 100, 100, 100, 100, 100,\r\n  ],\r\n  DURATION_ALERT: 5,\r\n};\r\n","import React from \"react\";\r\nimport { Phase } from \"../models/Phase\";\r\nimport { Player } from \"../models/Player.js\";\r\nimport { SETTINGS } from \"../constants/SETTINGS\";\r\n\r\ninterface StatusBarProps {\r\n  phase: Phase;\r\n  characters: Player[];\r\n}\r\n\r\nexport const StatusBar: React.FC<StatusBarProps> = ({ phase, characters }) => {\r\n  return (\r\n    <span className=\"statusbar\">\r\n      <b>Status bar</b>\r\n      <br />\r\n      Turn: {phase.turn} (00:00:0{phase.untilNextTurn})\r\n      <br />\r\n      Action Points: {characters[0].ap} / {SETTINGS.PLAYER_AP_MAX}\r\n      <br />\r\n      Health Points: {characters[0].hp} / {SETTINGS.PLAYER_HP_MAX}\r\n      <br />\r\n      <br />\r\n      <br />\r\n      <br />\r\n    </span>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\ninterface ActionBarProps {\r\n  onClick: React.MouseEventHandler;\r\n}\r\n\r\nexport const ActionBar: React.FC<ActionBarProps> = ({ onClick }) => {\r\n  return (\r\n    <span className=\"actionbar\">\r\n      <b>Actions</b>\r\n      <br />\r\n      <input\r\n        className=\"action\"\r\n        type=\"button\"\r\n        value=\"Search\"\r\n        onClick={onClick}\r\n      />\r\n    </span>\r\n  );\r\n};\r\n","export class Item {\r\n  id: number;\r\n  name: string;\r\n  frequency: number;\r\n\r\n  constructor(id: number, name: string, frequency: number) {\r\n    this.id = id;\r\n    this.name = name;\r\n    this.frequency = frequency;\r\n  }\r\n}\r\n","import { Item } from \"../models/Item\";\r\n\r\nexport const ITEM_REGISTRY = [\r\n  new Item(0, \" \", -1),\r\n  new Item(1, \"Log\", 0),\r\n  new Item(2, \"Plank\", 1),\r\n  new Item(3, \"Iron Ore\", 2),\r\n  new Item(4, \"Iron Bar\", 1),\r\n  new Item(5, \"Iron Sheet\", 2),\r\n  new Item(6, \"Broken Circuit Board\", 1),\r\n  new Item(7, \"Electronic Component\", 2),\r\n  new Item(8, \"Transistor Radio\", 999),\r\n];\r\n","import React from \"react\";\r\nimport Alert from \"react-bootstrap/Alert\";\r\nimport { AlertText } from \"../models/AlertText\";\r\n\r\ninterface AlertBarProps {\r\n  alertText: AlertText;\r\n  isVisible: boolean;\r\n}\r\n\r\nexport const AlertBar: React.FC<AlertBarProps> = ({ alertText, isVisible }) => {\r\n  return (\r\n    <span className=\"alertbar\">\r\n      <Alert key=\"mainAlert\" show={isVisible} variant={alertText.variant}>\r\n        <Alert.Heading>{alertText.header}</Alert.Heading>\r\n        {alertText.body}\r\n      </Alert>\r\n    </span>\r\n  );\r\n};\r\n","export class AlertText {\r\n  header: string;\r\n  body: string;\r\n  variant: string;\r\n\r\n  constructor(header: string, body: string, variant: string) {\r\n    this.header = header;\r\n    this.body = body;\r\n    this.variant = variant;\r\n  }\r\n}\r\n","import { AlertText } from \"../models/AlertText\";\r\nimport { ALERT_VARIANT } from \"./ALERT_VARIANTS\";\r\n\r\nexport const ALERT_TEXTS = {\r\n  START: new AlertText(\r\n    \"Your starship was heavily damaged during an orbital fight...\",\r\n    \"Pilots managed to perform an emergency landing on the planet below. The vessel is irreversibly damaged. Fellow crew is dead. Endless jungle covering the entire surface.\",\r\n    ALERT_VARIANT.PRIMARY\r\n  ),\r\n  OUT_OF_AP: new AlertText(\r\n    \"Out of Action Points\",\r\n    \"You are too tired to perform this action and need to chill for a  while. AP recover with time. Action Points recover gradually with time.\",\r\n    ALERT_VARIANT.WARNING\r\n  ),\r\n};\r\n","export class Tiletype {\r\n  id: number;\r\n  name: string;\r\n  color: string;\r\n\r\n  constructor(id: number, name: string, color: string) {\r\n    this.id = id;\r\n    this.name = name;\r\n    this.color = color;\r\n  }\r\n}\r\n","import { Tiletype } from \"../models/Tiletype\";\r\n\r\nexport const TILETYPE_REGISTRY = [\r\n  new Tiletype(0, \"Forest\", \"#32a871\"),\r\n  new Tiletype(1, \"Starship\", \"#929da6\"),\r\n  new Tiletype(2, \"Impact Cleaning\", \"#76a693\"),\r\n];\r\n","import { Item } from \"./Item\";\r\nimport { Player } from \"./Player\";\r\nimport { Tiletype } from \"./Tiletype\";\r\n\r\nexport class Cell {\r\n  type: Tiletype;\r\n  coords: {\r\n    x: number;\r\n    y: number;\r\n  };\r\n  characters: Player[];\r\n  items: Item[];\r\n\r\n  constructor(type: Tiletype, x: number, y: number) {\r\n    this.type = type;\r\n    this.coords = {\r\n      x: x,\r\n      y: y,\r\n    };\r\n    this.characters = [];\r\n    this.items = [];\r\n  }\r\n}\r\n","import { ALERT_TEXTS } from \"../constants/ALERT_TEXTS\";\r\nimport { SETTINGS } from \"../constants/SETTINGS\";\r\nimport { AlertText } from \"./AlertText\";\r\n\r\nexport class Phase {\r\n  turn: number;\r\n  untilNextTurn: number;\r\n  isNight: boolean;\r\n  alertActive: AlertText;\r\n  untilAlertDismissed: number;\r\n\r\n  constructor() {\r\n    this.turn = 1;\r\n    this.untilNextTurn = SETTINGS.DURATION_TURN;\r\n    this.isNight = false;\r\n    this.untilAlertDismissed = 0;\r\n    this.alertActive = ALERT_TEXTS.START;\r\n    this.untilAlertDismissed = 1200;\r\n  }\r\n}\r\n","import { ITEM_REGISTRY } from \"../constants/ITEM_REGISTRY\";\r\nimport { Item } from \"./Item\";\r\n\r\nexport class Inventory {\r\n  size: number;\r\n  slots: Item[];\r\n\r\n  constructor(inventorySize: number) {\r\n    this.size = inventorySize;\r\n    this.slots = new Array(inventorySize);\r\n    for (var i = 0; i < this.slots.length; i++) {\r\n      this.slots[i] = ITEM_REGISTRY[0];\r\n    }\r\n  }\r\n}\r\n","import { Inventory } from \"./Inventory\";\r\n\r\nexport class Player {\r\n  hp: number;\r\n  ap: number;\r\n  coords: {\r\n    x: number;\r\n    y: number;\r\n  };\r\n  inventory: Inventory;\r\n\r\n  constructor(hp: number, ap: number, x: number, y: number) {\r\n    this.hp = hp;\r\n    this.ap = ap;\r\n    this.coords = {\r\n      x: x,\r\n      y: y,\r\n    };\r\n    this.inventory = new Inventory(6);\r\n  }\r\n}\r\n","import { ITEM_REGISTRY } from \"../constants/ITEM_REGISTRY\";\r\nimport { SETTINGS } from \"../constants/SETTINGS\";\r\nimport { Item } from \"../models/Item\";\r\n\r\nexport const generateItem = (): Item => {\r\n  const randomNumber = 100 * Math.random();\r\n  for (\r\n    let frequency = 0;\r\n    frequency < SETTINGS.ITEM_SEARCH_FREQUENCY_THRESHOLDS.length - 1;\r\n    frequency++\r\n  ) {\r\n    if (\r\n      randomNumber > SETTINGS.ITEM_SEARCH_FREQUENCY_THRESHOLDS[frequency] &&\r\n      randomNumber < SETTINGS.ITEM_SEARCH_FREQUENCY_THRESHOLDS[frequency + 1]\r\n    ) {\r\n      const itemSubset = generateItemSubset(frequency);\r\n      const randomIndex = Math.floor(Math.random() * itemSubset.length);\r\n      const randomItem = itemSubset[randomIndex];\r\n      //console.log(randomNumber + \"    \" + frequency + \"    \" + randomItem);\r\n      return randomItem;\r\n    }\r\n  }\r\n  return ITEM_REGISTRY[0];\r\n};\r\n\r\nconst generateItemSubset = (frequency: number): Item[] => {\r\n  let itemSubset = [];\r\n  for (let i = 0; i < ITEM_REGISTRY.length; i++) {\r\n    if (ITEM_REGISTRY[i].frequency === frequency) {\r\n      itemSubset.push(ITEM_REGISTRY[i]);\r\n    }\r\n  }\r\n  return itemSubset;\r\n};\r\n","import styled from \"styled-components\";\r\n\r\nexport const ItemTile = styled.input`\r\n  width: 80%;\r\n  height: 40px;\r\n  margin: 3px 3px 3px 3px;\r\n  background-color: rgb(148, 148, 184);\r\n  border-radius: 5px;\r\n  border: 2px solid rgb(209, 209, 224);\r\n  color: white;\r\n  text-align: center;\r\n  font-size: 14px;\r\n`;\r\n","import React from \"react\";\r\nimport { Player } from \"../models/Player\";\r\nimport { ItemTile } from \"./ItemTile\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\ninterface InventoryBarListProps {\r\n  characters: Player[];\r\n  onClick: (slot: number) => void;\r\n  onDragEnd: (result: any) => void;\r\n}\r\n\r\nexport const InventoryBarList: React.FC<InventoryBarListProps> = ({\r\n  characters,\r\n  onClick,\r\n  onDragEnd,\r\n}) => {\r\n  return (\r\n    <Droppable droppableId=\"items-inventory\">\r\n      {(provided) => (\r\n        <ul {...provided.droppableProps} ref={provided.innerRef}>\r\n          {characters[0].inventory.slots.map((item, index) => {\r\n            return (\r\n              <Draggable\r\n                key={index}\r\n                draggableId={\"item-inventory-\" + index}\r\n                index={index}\r\n              >\r\n                {(provided) => (\r\n                  <li\r\n                    ref={provided.innerRef}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                  >\r\n                    <ItemTile\r\n                      type=\"submit\"\r\n                      value={item.name}\r\n                      onClick={() => onClick(index)}\r\n                    />\r\n                  </li>\r\n                )}\r\n              </Draggable>\r\n            );\r\n          })}\r\n          {provided.placeholder}\r\n        </ul>\r\n      )}\r\n    </Droppable>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Player } from \"../models/Player\";\r\nimport { InventoryBarList } from \"./InventoryBarList\";\r\n\r\ninterface InventoryBarWrapperProps {\r\n  characters: Player[];\r\n  onClick: (slot: number) => void;\r\n  onDragEnd: (result: any) => void;\r\n}\r\n\r\nexport const InventoryBarWrapper: React.FC<InventoryBarWrapperProps> = ({\r\n  characters,\r\n  onClick,\r\n  onDragEnd,\r\n}) => {\r\n  return (\r\n    <div>\r\n      <b>Inventory</b>\r\n      <br />\r\n\r\n      <InventoryBarList\r\n        characters={characters}\r\n        onClick={onClick}\r\n        onDragEnd={onDragEnd}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Cell } from \"../models/Cell\";\r\nimport { Player } from \"../models/Player\";\r\nimport { ItemTile } from \"./ItemTile\";\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\n\r\ninterface CellBarListProps {\r\n  characters: Player[];\r\n  tiles: Cell[][];\r\n  onClick: (slot: number) => void;\r\n  onDragEnd: (result: any) => void;\r\n}\r\n\r\nexport const CellBarList: React.FC<CellBarListProps> = ({\r\n  characters,\r\n  tiles,\r\n  onClick,\r\n  onDragEnd,\r\n}) => {\r\n  const x = characters[0].coords.x;\r\n  const y = characters[0].coords.y;\r\n\r\n  return (\r\n    <Droppable droppableId=\"items-cell\">\r\n      {(provided) => (\r\n        <ul {...provided.droppableProps} ref={provided.innerRef}>\r\n          {tiles[x][y].items.map((item, index) => {\r\n            return (\r\n              <Draggable\r\n                key={index}\r\n                draggableId={\"item-cell-\" + index}\r\n                index={index}\r\n              >\r\n                {(provided) => (\r\n                  <li\r\n                    ref={provided.innerRef}\r\n                    {...provided.draggableProps}\r\n                    {...provided.dragHandleProps}\r\n                  >\r\n                    <ItemTile\r\n                      type=\"submit\"\r\n                      value={tiles[x][y].items[index].name}\r\n                      onClick={() => onClick(index)}\r\n                    />\r\n                  </li>\r\n                )}\r\n              </Draggable>\r\n            );\r\n          })}\r\n          {provided.placeholder}\r\n        </ul>\r\n      )}\r\n    </Droppable>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Cell } from \"../models/Cell\";\r\nimport { Player } from \"../models/Player\";\r\nimport { CellBarList } from \"./CellBarList\";\r\n\r\ninterface CellBarWrapperProps {\r\n  characters: Player[];\r\n  tiles: Cell[][];\r\n  onClick: (slot: number) => void;\r\n  onDragEnd: (result: any) => void;\r\n}\r\n\r\nexport const CellBarWrapper: React.FC<CellBarWrapperProps> = ({\r\n  characters,\r\n  tiles,\r\n  onClick,\r\n  onDragEnd,\r\n}) => {\r\n  const x = characters[0].coords.x;\r\n  const y = characters[0].coords.y;\r\n\r\n  return (\r\n    <div>\r\n      <b>\r\n        {tiles[x][y].type.name} ({x}, {y})\r\n      </b>\r\n      <br />\r\n\r\n      <CellBarList\r\n        characters={characters}\r\n        tiles={tiles}\r\n        onClick={onClick}\r\n        onDragEnd={onDragEnd}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\n\r\nexport const CraftBar: React.FC = () => {\r\n  return (\r\n    <div>\r\n      <b>Craft</b>\r\n      <br />\r\n    </div>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport { Cell } from \"../models/Cell\";\r\nimport { Player } from \"../models/Player\";\r\nimport { InventoryBarWrapper } from \"./InventoryBarWrapper\";\r\nimport { CellBarWrapper } from \"./CellBarWrapper\";\r\nimport { CraftBar } from \"./CraftBar\";\r\nimport { DragDropContext } from \"react-beautiful-dnd\";\r\n\r\ninterface ItemBarProps {\r\n  characters: Player[];\r\n  tiles: Cell[][];\r\n  onClickInventory: (slot: number) => void;\r\n  onClickCell: (slot: number) => void;\r\n  onDragEnd: (result: any) => void;\r\n}\r\n\r\nexport const ItemBar: React.FC<ItemBarProps> = ({\r\n  characters,\r\n  tiles,\r\n  onClickInventory,\r\n  onClickCell,\r\n  onDragEnd,\r\n}) => {\r\n  return (\r\n    <DragDropContext onDragEnd={onDragEnd}>\r\n      <table className=\"itembar\">\r\n        <tbody>\r\n          <tr className=\"itemlists\">\r\n            <td className=\"itemlist\">\r\n              <InventoryBarWrapper\r\n                characters={characters}\r\n                onClick={onClickInventory}\r\n                onDragEnd={onDragEnd}\r\n              />\r\n            </td>\r\n\r\n            <td className=\"itemlist\">\r\n              <CellBarWrapper\r\n                characters={characters}\r\n                tiles={tiles}\r\n                onClick={onClickCell}\r\n                onDragEnd={onDragEnd}\r\n              />\r\n            </td>\r\n\r\n            <td className=\"itemlist\">\r\n              <CraftBar />\r\n            </td>\r\n          </tr>\r\n        </tbody>\r\n      </table>\r\n    </DragDropContext>\r\n  );\r\n};\r\n","import React from \"react\";\r\nimport \"../styles/App.css\";\r\nimport { Map } from \"./Map\";\r\nimport { StatusBar } from \"./StatusBar\";\r\nimport { ActionBar } from \"./ActionBar\";\r\nimport { SETTINGS } from \"../constants/SETTINGS\";\r\nimport { ITEM_REGISTRY } from \"../constants/ITEM_REGISTRY\";\r\nimport { AlertBar } from \"./AlertBar\";\r\nimport { ALERT_TEXTS } from \"../constants/ALERT_TEXTS\";\r\nimport { AlertText } from \"../models/AlertText\";\r\nimport { useState } from \"react\";\r\nimport { useEffect } from \"react\";\r\nimport { generateInitialState } from \"../utils/GameUtils\";\r\nimport { generateItem } from \"../utils/ItemUtils\";\r\nimport { ItemBar } from \"./ItemBar\";\r\n\r\n// Custom hook to force rerenders\r\nconst useForceUpdate = () => {\r\n  const [value, setValue] = useState(0); // Integer state\r\n  return () => setValue((value) => value + 1); // Update the state to force render\r\n};\r\n\r\nexport const Game: React.FC = () => {\r\n  const initialState = generateInitialState();\r\n\r\n  const [characters, setCharacters] = useState(initialState.characters);\r\n  const [phase, setPhase] = useState(initialState.phase);\r\n  const [tiles, setTiles] = useState(initialState.tiles);\r\n\r\n  const forceUpdate = useForceUpdate();\r\n\r\n  const gameLoop = () => {\r\n    const updatedCharacters = characters;\r\n    const updatedPhase = phase;\r\n\r\n    if (phase.untilNextTurn > 1) {\r\n      updatedPhase.untilNextTurn -= 1;\r\n    } else {\r\n      updatedPhase.turn += 1;\r\n      updatedPhase.untilNextTurn = SETTINGS.DURATION_TURN;\r\n      updatedCharacters[0].ap < 4 && (updatedCharacters[0].ap += 1);\r\n    }\r\n\r\n    if (updatedPhase.untilAlertDismissed > 0) {\r\n      updatedPhase.untilAlertDismissed -= 1;\r\n    }\r\n\r\n    setCharacters(updatedCharacters);\r\n    setPhase(updatedPhase);\r\n    forceUpdate();\r\n  };\r\n\r\n  const handleClickTile = (col: number, row: number) => {\r\n    if (characters[0].ap > 0) {\r\n      if (distCellToCharacter(col, row) === 1) {\r\n        let updatedCharacters = characters;\r\n        updatedCharacters[0].ap -= 1;\r\n\r\n        const oldX = characters[0].coords.x;\r\n        const oldY = characters[0].coords.y;\r\n\r\n        updatedCharacters[0].coords = {\r\n          x: col,\r\n          y: row,\r\n        };\r\n\r\n        let updatedTiles = tiles;\r\n        updatedTiles[oldX][oldY].characters = [];\r\n        updatedTiles[col][row].characters.push(updatedCharacters[0]);\r\n\r\n        setCharacters(updatedCharacters);\r\n        setTiles(updatedTiles);\r\n      }\r\n    } else {\r\n      handleDisplayAlert(ALERT_TEXTS.OUT_OF_AP);\r\n    }\r\n    forceUpdate();\r\n  };\r\n\r\n  const handleClickSearch = () => {\r\n    if (characters[0].ap > 0) {\r\n      let updatedCharacters = characters;\r\n      updatedCharacters[0].ap -= 1;\r\n\r\n      let fillPosition = -1;\r\n      for (let i = 0; i < characters[0].inventory.size; i++) {\r\n        if (characters[0].inventory.slots[i] === ITEM_REGISTRY[0]) {\r\n          fillPosition = i;\r\n          break;\r\n        }\r\n      }\r\n\r\n      const randomIndex = Math.floor(Math.random() * ITEM_REGISTRY.length);\r\n      if (fillPosition !== -1) {\r\n        updatedCharacters[0].inventory.slots[fillPosition] = generateItem();\r\n\r\n        setCharacters(updatedCharacters);\r\n      } else {\r\n        let updatedTiles = tiles;\r\n        const x = characters[0].coords.x;\r\n        const y = characters[0].coords.y;\r\n        updatedTiles[x][y].items.push(ITEM_REGISTRY[randomIndex]);\r\n\r\n        setCharacters(updatedCharacters);\r\n        setTiles(updatedTiles);\r\n      }\r\n    } else {\r\n      handleDisplayAlert(ALERT_TEXTS.OUT_OF_AP);\r\n    }\r\n    forceUpdate();\r\n  };\r\n\r\n  const handleClickItemInventory = (slot: number) => {\r\n    if (characters[0].inventory.slots[slot].id !== ITEM_REGISTRY[0].id) {\r\n      const x = characters[0].coords.x;\r\n      const y = characters[0].coords.y;\r\n\r\n      let updatedCharacters = characters;\r\n      let updatedTiles = tiles;\r\n\r\n      updatedTiles[x][y].items.push(characters[0].inventory.slots[slot]);\r\n      updatedCharacters[0].inventory.slots[slot] = ITEM_REGISTRY[0];\r\n\r\n      setCharacters(updatedCharacters);\r\n      setTiles(updatedTiles);\r\n    }\r\n    forceUpdate();\r\n  };\r\n\r\n  const handleClickItemTile = (slot: number) => {\r\n    let fillPosition = -1;\r\n    for (var i = 0; i < characters[0].inventory.size; i++) {\r\n      if (characters[0].inventory.slots[i] === ITEM_REGISTRY[0]) {\r\n        fillPosition = i;\r\n        break;\r\n      }\r\n    }\r\n    if (fillPosition !== -1) {\r\n      const x = characters[0].coords.x;\r\n      const y = characters[0].coords.y;\r\n\r\n      let updatedCharacters = characters;\r\n      let updatedTiles = tiles;\r\n\r\n      updatedCharacters[0].inventory.slots[fillPosition] =\r\n        tiles[x][y].items[slot];\r\n      updatedTiles[x][y].items.splice(slot, 1);\r\n\r\n      setCharacters(updatedCharacters);\r\n      setTiles(updatedTiles);\r\n    }\r\n    forceUpdate();\r\n  };\r\n\r\n  const handleDisplayAlert = (alert: AlertText) => {\r\n    const updatedPhase = phase;\r\n    updatedPhase.alertActive = alert;\r\n    updatedPhase.untilAlertDismissed = SETTINGS.DURATION_ALERT;\r\n    setPhase(updatedPhase);\r\n    forceUpdate();\r\n  };\r\n\r\n  const handleDragEnd = (result: any) => {\r\n    console.log(result);\r\n    if (!result.destination) return;\r\n\r\n    let itemsSource = Array(0);\r\n    let itemsDestination = Array(0);\r\n\r\n    const x = characters[0].coords.x;\r\n    const y = characters[0].coords.y;\r\n\r\n    if (\r\n      result.source.droppableId === \"items-inventory\" &&\r\n      result.destination.droppableId === \"items-cell\"\r\n    ) {\r\n      itemsSource = Array.from(characters[0].inventory.slots);\r\n      itemsDestination = Array.from(tiles[x][y].items);\r\n\r\n      const [reorderedItem] = itemsSource.splice(result.source.index, 1);\r\n      itemsDestination.splice(result.destination.index, 0, reorderedItem);\r\n\r\n      const updatedCharacters = characters;\r\n      const updatedTiles = tiles;\r\n\r\n      updatedCharacters[0].inventory.slots = itemsSource;\r\n      updatedTiles[x][y].items = itemsDestination;\r\n\r\n      setCharacters(updatedCharacters);\r\n      setTiles(updatedTiles);\r\n    }\r\n\r\n    if (\r\n      result.source.droppableId === \"items-cell\" &&\r\n      result.destination.droppableId === \"items-inventory\"\r\n    ) {\r\n      itemsSource = Array.from(tiles[x][y].items);\r\n      itemsDestination = Array.from(characters[0].inventory.slots);\r\n\r\n      const [reorderedItem] = itemsSource.splice(result.source.index, 1);\r\n      itemsDestination.splice(result.destination.index, 0, reorderedItem);\r\n\r\n      const updatedCharacters = characters;\r\n      const updatedTiles = tiles;\r\n\r\n      updatedCharacters[0].inventory.slots = itemsDestination;\r\n      updatedTiles[x][y].items = itemsSource;\r\n\r\n      setCharacters(updatedCharacters);\r\n      setTiles(updatedTiles);\r\n    }\r\n\r\n    if (\r\n      result.source.droppableId === \"items-inventory\" &&\r\n      result.destination.droppableId === \"items-inventory\"\r\n    ) {\r\n      const items = Array.from(characters[0].inventory.slots);\r\n\r\n      const [reorderedItem] = items.splice(result.source.index, 1);\r\n      items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n      const updatedCharacters = characters;\r\n      const updatedTiles = tiles;\r\n\r\n      updatedCharacters[0].inventory.slots = items;\r\n\r\n      setCharacters(updatedCharacters);\r\n      setTiles(updatedTiles);\r\n    }\r\n\r\n    if (\r\n      result.source.droppableId === \"items-cell\" &&\r\n      result.destination.droppableId === \"items-cell\"\r\n    ) {\r\n      const items = Array.from(tiles[x][y].items);\r\n\r\n      const [reorderedItem] = items.splice(result.source.index, 1);\r\n      items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n      const updatedCharacters = characters;\r\n      const updatedTiles = tiles;\r\n\r\n      updatedTiles[x][y].items = items;\r\n\r\n      setCharacters(updatedCharacters);\r\n      setTiles(updatedTiles);\r\n    }\r\n\r\n    forceUpdate();\r\n  };\r\n\r\n  const handleDragEndInventory = (result: any) => {\r\n    console.log(result);\r\n    if (!result.destination) return;\r\n\r\n    const items = Array.from(characters[0].inventory.slots);\r\n    const [reorderedItem] = items.splice(result.source.index, 1);\r\n    items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n    let updatedCharacters = characters;\r\n    updatedCharacters[0].inventory.slots = items;\r\n\r\n    setCharacters(updatedCharacters);\r\n    forceUpdate();\r\n  };\r\n\r\n  const handleDragEndCell = (result: any) => {\r\n    console.log(result);\r\n    if (!result.destination) return;\r\n\r\n    const x = characters[0].coords.x;\r\n    const y = characters[0].coords.y;\r\n\r\n    const items = Array.from(tiles[x][y].items);\r\n    const [reorderedItem] = items.splice(result.source.index, 1);\r\n    items.splice(result.destination.index, 0, reorderedItem);\r\n\r\n    const updatedTiles = tiles;\r\n    tiles[x][y].items = items;\r\n\r\n    setTiles(updatedTiles);\r\n    forceUpdate();\r\n  };\r\n\r\n  const distCellToCharacter = (col: number, row: number) => {\r\n    return Math.max(\r\n      Math.abs(tiles[col][row].coords.x - characters[0].coords.x),\r\n      Math.abs(tiles[col][row].coords.y - characters[0].coords.y)\r\n    );\r\n  };\r\n\r\n  useEffect(() => {\r\n    setInterval(gameLoop, 1000);\r\n  }, []);\r\n\r\n  return (\r\n    <div className=\"ui\">\r\n      <div className=\"ui-row1\">\r\n        <Map tiles={tiles} onClick={handleClickTile} />\r\n        <ItemBar\r\n          characters={characters}\r\n          tiles={tiles}\r\n          onClickInventory={handleClickItemInventory}\r\n          onClickCell={handleClickItemTile}\r\n          onDragEnd={handleDragEnd}\r\n        />\r\n      </div>\r\n\r\n      <div className=\"ui-row2\">\r\n        <StatusBar phase={phase} characters={characters} />\r\n        <ActionBar onClick={handleClickSearch} />\r\n      </div>\r\n\r\n      <div className=\"ui-row3\">\r\n        <AlertBar\r\n          alertText={phase.alertActive}\r\n          isVisible={phase.untilAlertDismissed > 0}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Game;\r\n","import { SETTINGS } from \"../constants/SETTINGS\";\r\nimport { TILETYPE_REGISTRY } from \"../constants/TILETYPE_REGISTRY\";\r\nimport { Cell } from \"../models/Cell\";\r\nimport { Phase } from \"../models/Phase\";\r\nimport { Player } from \"../models/Player\";\r\n\r\ninterface GameState {\r\n  characters: Player[];\r\n  phase: Phase;\r\n  tiles: Cell[][];\r\n}\r\n\r\nexport const generateInitialState = (): GameState => {\r\n  let initialTiles = new Array(11);\r\n  for (let col = 0; col < initialTiles.length; col++) {\r\n    initialTiles[col] = new Array(11);\r\n    for (let row = 0; row < initialTiles[col].length; row++) {\r\n      initialTiles[col][row] = new Cell(TILETYPE_REGISTRY[0], col, row);\r\n    }\r\n  }\r\n\r\n  initialTiles[5][5].type = TILETYPE_REGISTRY[1];\r\n  initialTiles[4][4].type = TILETYPE_REGISTRY[2];\r\n  initialTiles[5][4].type = TILETYPE_REGISTRY[2];\r\n  initialTiles[6][4].type = TILETYPE_REGISTRY[2];\r\n  initialTiles[4][5].type = TILETYPE_REGISTRY[2];\r\n  initialTiles[6][5].type = TILETYPE_REGISTRY[2];\r\n  initialTiles[4][6].type = TILETYPE_REGISTRY[2];\r\n  initialTiles[5][6].type = TILETYPE_REGISTRY[2];\r\n  initialTiles[6][6].type = TILETYPE_REGISTRY[2];\r\n\r\n  initialTiles[5][5].characters.push(\r\n    new Player(\r\n      SETTINGS.PLAYER_HP_MAX,\r\n      SETTINGS.PLAYER_AP_MAX,\r\n      SETTINGS.POSITION_START.x,\r\n      SETTINGS.POSITION_START.y\r\n    )\r\n  );\r\n\r\n  // Initial characters\r\n\r\n  const initialCharacters = [];\r\n  initialCharacters.push(\r\n    new Player(\r\n      SETTINGS.PLAYER_HP_MAX,\r\n      SETTINGS.PLAYER_AP_MAX,\r\n      SETTINGS.POSITION_START.x,\r\n      SETTINGS.POSITION_START.y\r\n    )\r\n  );\r\n\r\n  // Initial phase\r\n\r\n  const initialPhase = new Phase();\r\n\r\n  return {\r\n    characters: initialCharacters,\r\n    phase: initialPhase,\r\n    tiles: initialTiles,\r\n  };\r\n};\r\n","import \"../styles/App.css\";\nimport Game from \"./Game\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst App = () => {\n  return <Game />;\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./components/App.tsx\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}